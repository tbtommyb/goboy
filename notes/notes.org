[up to p26 in gameboy programmer's manual]
* Gameboy design notes
** Overview                                                          :ATTACH:
   :PROPERTIES:
   :Attachments: block%20diagram.png
   :ID:       C4E8B7A4-B3CA-4F31-A1F4-F79498E8C9C0
   :END:
*** 64 kbit SRAM for LCD
8192 bytes
*** Separate 64 kbit SRAM working memory
8192 bytes for work RAM
40 x 28 bits for OAM (different to below?)
*** 8 bit microprocessor                                             :ATTACH:
    :PROPERTIES:
    :Attachments: cpu.png
    :ID:       0ECB438D-0EDD-4647-8C02-BEC47B07EC1A
    :END:
1.05Mhz
127 x 8 bits for work and stack RAM
Input ports P10 - P13
Output ports P14 and P15
NOTE: monitor program runs first and initialises everything and passed control to user program
0.954us instruction cycle. Source oscillation 4.1943Mhz.
two standby modes: halt and stop.
*** LCD screen
160 x 144 dots
8 x 8 dots for background block structure, 8 x 8 or 8 x 16 for object
number of usable characters (?): BG 256, obj 8x8 256, obj 8x16 128
bg grayscale 4 shades, 1 palette. Object 3 shades with 2 palettes
Object priority: object with smallest X coord, if same then obj with lowest OBJ number
Can have 40 objects on one screen, 10 on one line
40 x 32 bits of built-in RAM (OBJ-RAM for LCD). I think in the LCD controller
*** Timing
1 8 bit timer and 16 stages (?)
TIMA timer counter, TMA timer modulo register, TAC timer control register
*** DMA controller
40 x 32 bit transfers from 8000h - DFFFh -> OAM FE00h - FE9Fh. Specify start address in increments of 100h.
*** Interrupts
4 maskable internal interrupts, 1 maskable external
*** Sound
1 - square with sweep and envelope
2 - square with envelope
3 - arbitrary generated waveform
4 - generated white noise
two output channels. Can choose channel for output
*** Operating keys
*** Serial port - probably will ignore
** Memory configuration                                              :ATTACH:
   :PROPERTIES:
   :Attachments: memory%20map.png
   :ID:       80634E03-3845-4178-95F0-5336DB23775D
   :END:
   32kb from 0h to 7FFFh available for programs
   0h - 0FFh allocated as destination for RST (??) instructions and starting address of interrupts
   100h - 14Fh allocated as ROM area for storing stuff (??)
   150h start of user program
   8000h - 9FFFh allocated as RAM for LCD. 8kb. Different to LCD SRAM? One area for character data and one for background. No bank switching so maybe just one block.
   A000h - BFFFh allocated for external expansion RAM.
   C000h - DFFFh work RAM area.
   E000h - FDFFh PROHIBITED
   FE00h - FFFFh CPU internal RAM.
   FE00h - FE9Fh OAM-RAM that holds display data for 40 objects. Not sure of purpose here. 40 x 32bits.
   FEA0h - FEFFh PROHIBITED?
   FF00h - FF7Fh & FFFFh instruction registers, flags etc
   FF80h - FFFEh CPU work RAM and/or stack RAM

** Registers                                                         :ATTACH:
   :PROPERTIES:
   :Attachments: registers.png register%20initial%20values.png
   :ID:       6590D001-B664-4F1A-8041-20F61CE8E67B
   :END:
*** Inputs
Seem to write 0x10 to P1 ($FFOO) and read back UDLR, 0x20 to get A, B, start, select. P10-13 indicate whether button pressed
*** Interrupts
Interrupt request flag is IF: 4
*** Divider
DIV at FF04. f / 2^9 + bit number. f = 4.194304Mhz. bit 0 8192 Hz down to 64 Hz at bit 7.
TIMA at FF05 shows upper 8 bits of counter. Reset to 0 when LD executed.
*** Timers
TIMA generates interrupt when it overflows. Uses clock selected by TAC. Value in TMA is loaded into TIMA on overflow.
** Interrupts                                                        :ATTACH:
   :PROPERTIES:
   :Attachments: tac.png
   :ID:       000BAF64-2D1A-487D-9FEA-16EC47A8D45E
   :END:
LCD display vertical blanking
status interrupts from LCDC
timer overflow interrupt
serial transfer complete interrupt
end of input signal interrupt from ports P10-P13
** CPU Instruction Set
*** general purpose registers
8-bit accumulator A, auxiliaries B - L
BC, DE and HL pairs work as data pointers
16-bit PC
16-bit SP. Decrement on CALL, PUSH or INT. Increment on RET or POP. Stack grows up?
8-bit F flag register
| register | bit pattern |
|----------+-------------|
| A        |         111 |
| B        |         000 |
| C        |         001 |
| D        |         101 |
| E        |         011 |
| H        |         100 |
| L        |         101 |
|          |             |
**** flags
Z bit 7, set when result is 0
N bit 6 set after substruction
H bit 5 set when carrying or borrowing on bit 3
CY bit 4 set when carrying or borrowing on bit 7
*** instructions
**** LD 8 bit
~LD r1, r2~. Load r2 into r1. 1 cycle. no flags.
01[r1][r2]
